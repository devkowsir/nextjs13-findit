// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?        @unique
  bio                    String?
  emailVerified          DateTime?
  username               String?
  image                  String?
  usernameHasBeenChanged Boolean        @default(false)
  accounts               Account[]
  sessions               Session[]
  topics                 Topic[]        @relation("CreatedBy")
  subscriptions          Subscription[]
  posts                  Post[]
  postVotes              PostVote[]
  comments               Comment[]
  commentVotes           CommentVote[]
  followedBy             Follow[]       @relation("FollowedBy")
  followingTo            Follow[]       @relation("FollowingTo")

  @@unique([username])
}

model Follow {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  followedBy   User   @relation("FollowedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followedById String @db.ObjectId
  followingTo  User   @relation("FollowingTo", fields: [follwingToId], references: [id], onDelete: Cascade)
  follwingToId String @db.ObjectId

  @@unique([followedById, follwingToId])
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  posts       Post[]

  creatorId   String         @db.ObjectId
  creator     User           @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  subscribers Subscription[]
}

model Subscription {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @db.ObjectId
  topic     Topic  @relation(fields: [topicName], references: [name], onDelete: Cascade)
  topicName String

  @@unique([userId, topicName])
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  slug      String
  title     String
  content   Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  rating    Int        @default(0) @db.Int
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String     @db.ObjectId
  topic     Topic      @relation(fields: [topicName], references: [name], onDelete: Cascade)
  topicName String
  comments  Comment[]
  postvotes PostVote[]

  @@index(createdAt)
  @@index(rating)
  @@index(authorId)
  @@index(topicName)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  rating    Int      @default(0) @db.Int

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentVotes CommentVote[]

  @@index(createdAt)
  @@index(rating)
  @@index(postId)
  @@index(replyToId)
}

model PostVote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.ObjectId
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  type   VoteType

  @@unique([userId, postId])
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @db.ObjectId
  type      VoteType

  @@unique([userId, commentId])
}
